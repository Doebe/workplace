#include <bits/stdc++.h>
using namespace std;

const int MAX_INT = std::numeric_limits<int>::max();
const int MIN_INT = std::numeric_limits<int>::min();
const int INF = 1000000000;
const int NEG_INF = -1000000000;

#define max(a,b)(a>b?a:b)
#define min(a,b)(a<b?a:b)
#define MEM(arr,val)memset(arr,val, sizeof arr)
#define PI acos(0)*2.0
#define eps 1.0e-9
#define are_equal(a,b)fabs(a-b)<eps
#define LS(b)(b& (-b)) // Least significant bit
#define DEG_to_RAD(a)((a*PI)/180.0) // convert to radians

typedef long long ll;
typedef pair<int,int> ii;
typedef pair<int,char> ic;
typedef pair<long,char> lc;
typedef vector<int> vi;
typedef vector<ii> vii;

int gcd(int a,int b){return b == 0 ? a : gcd(b,a%b);}
int lcm(int a,int b){return a*(b/gcd(a,b));}

ll res, mx, bs;
vi arr;
ll memo[1<<21];

bool backtrack(int bitmask, ll sum) {
	if (memo[bitmask] == 1)
		return false;
	memo[bitmask] = 1;
	for (int i = 0; i < arr.size(); i++) {
		if ((1<<i) & bitmask)
			continue;
		if (arr[i] + sum > res)
			continue;
		bitmask |= (1<<i);
		if (mx < sum+arr[i]) {
			mx = sum+arr[i];
			bs = bitmask;
		}
		if (arr[i] + sum == res)
			return true;
		if (backtrack(bitmask, sum+arr[i]))
			return true;
		bitmask &= ~(1<<i);
	}
	return false;
}

int main(){
	string s;
	while(getline(cin, s) && s!=""){
		stringstream ss(s);
		ss >> res;
		mx = 0;
		MEM(memo, 0);
		int a;
		arr.clear();
		ss >> a;
		arr = vi(a);
		for (int i = 0; i < a; i++)
			ss >> arr[i];
		backtrack(0, 0);
		for (int i = 0; i < arr.size(); i++)
			if (bs & (1<<i))
				cout << arr[i] << " ";
		cout << "sum:" << mx << endl;
	}
	return 0;
}
