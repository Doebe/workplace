{
  "name": "getusermedia",
  "description": "cross-browser getUserMedia shim with node.js style error-first API.",
  "version": "1.3.5",
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "browser": "index-browser.js",
  "devDependencies": {
    "browserify": "^10.2.1",
    "precommit-hook": "1.x",
    "tape": "^4.0.0",
    "travis-multirunner": "^2.5.0",
    "testling": "^1.7.1"
  },
  "keywords": [
    "browser",
    "getUserMedia",
    "WebRTC"
  ],
  "license": "MIT",
  "dependencies": {
    "webrtc-adapter-test": "^0.2.3"
  },
  "testling": {
    "files": "test/test.js"
  },
  "scripts": {
    "test-travis": "test/run-tests"
  },
  "main": "index-node.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/HenrikJoreteg/getUserMedia"
  },
  "readme": "# getUserMedia\n\n## What is this?\n\nA tiny browser module that gives us a simple API for getting access to a user's camera or microphone by wrapping the `navigator.getUserMedia` API in modern browsers.\n\nThis is important because as of right now, all browsers return errors differently. More on that below.\n\nThis lib also gracefully handles the lack of support in a browser. So you never have to check first (see error handling below).\n\nIt gives us a cleaner node.js-style, error-first API and cross-browser handling. No browser support checking necessary, lack of support is treated in the same way as when the user rejects the request: the callback gets passed an error as the first argument.\n\nSuitable for use with browserify/CommonJS on the client. \n\nIf you're not using browserify or you want AMD support use `getusermedia.bundle.js`. Note that if no module system is detected it simply attaches a function called `getUserMedia` to `window`.\n\n\n\n## Installing\n\n```\nnpm install getusermedia\n```\n\n## How to use it\n\n\nWith this helper it's clean/simple to get access to a user's camera, mic, etc.\n\n```js\nvar getUserMedia = require('getusermedia');\n\ngetUserMedia(function (err, stream) {\n    // if the browser doesn't support user media\n    // or the user says \"no\" the error gets passed\n    // as the first argument.\n    if (err) {\n       console.log('failed');\n    } else {\n       console.log('got a stream', stream);  \n    }\n});\n```\n\nPassing in options is optional. It defaults to `{video: true, audio: true}`;\n\n```js\n// optionally pass constraints as the first argument\n// they just passed through.\ngetUserMedia({video: true, audio: false}, function (err, stream) { ... });\n```\n\n\n## Why? Because it's super ugly without this tool\n\n```js\n// first deal with browser prefixes\nvar getUserMedia = navigator.getUserMedia || \n    navigator.mozGetUserMedia || \n    navigator.webkitGetUserMedia;\n\n// make sure it's supported and bind to navigator\nif (getUserMedia) {\n    getUserMedia = getUserMedia.bind(navigator);\n} else {\n    // have to figure out how to handle the error somehow\n}\n\n// then deal with a weird, positional error handling API\ngetUserMedia(\n    // media constraints\n    {video: true, audio: true}, \n    // success callback\n    function (stream) {\n        // gets stream if successful\n    }, \n    // error callback\n    function (error) {\n        // called if failed to get media\n    }\n)\n```\n\n\n## Handling errors (summary)\n\nAll failed calls to `getusermedia` in this library will return an error object (of type `NavigatorUserMediaError`) as the first argument to the callback. All will have a `.name` according to [the specification](http://w3c.github.io/mediacapture-main/getusermedia.html#mediastreamerror)\n\n## Testing\n\nFor Firefox testing, the module evaluates the localStorage 'useFirefoxFakeDevice' variable to access fake devices.\n\n## License\n\nMIT\n\n## Created By\n\nIf you like this, follow: [@HenrikJoreteg](http://twitter.com/henrikjoreteg) on twitter.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/HenrikJoreteg/getUserMedia/issues"
  },
  "_id": "getusermedia@1.3.5",
  "dist": {
    "shasum": "cd7d3dafc27fbe7a5897f7b942ef023835283156"
  },
  "_from": "getusermedia@",
  "_resolved": "https://registry.npmjs.org/getusermedia/-/getusermedia-1.3.5.tgz"
}
