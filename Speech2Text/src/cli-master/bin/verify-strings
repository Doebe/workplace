#!/usr/bin/env ruby

ENV['GOPATH']="#{ENV['HOME']}/go"
ENV['PATH']="#{ENV['PATH']}:#{ENV['GOPATH']}/bin"
CLI_ROOT = File.expand_path(File.join(File.dirname(__FILE__), ".."))

@verbose = false

def split_locale(locale)
  return locale.split('_')
end

def install_i18n
  output = `go get -u go get github.com/maximilien/i18n4go/i18n4go`
  unless $?.exitstatus == 0
    puts "Cannot install latest i18n tool to verify strings:\n#{output}"
    exit 1
  end
end

def verify_strings(english_reference_file, locale_to_verify)
  language_to_verify, _ = split_locale(locale_to_verify)
  en_path = "/en/".gsub("/", File::SEPARATOR)
  lang_path = "/#{language_to_verify}/".gsub("/", File::SEPARATOR)
  file_to_verify = english_reference_file.gsub("en_US", locale_to_verify).gsub(en_path, lang_path)

  if @verbose
    puts "Verifying: \n\t #{english_reference_file} \n\t #{file_to_verify}"
  end

  result = system("i18n4go -c verify-strings -source-language en_US -f #{english_reference_file} -languages #{locale_to_verify} -language-files #{file_to_verify}")
  unless result
    puts "failed verification:"
    unless File.exist?(file_to_verify)
      puts "#{file_to_verify} does not exist."
      exit 1
    end

    `find #{file_to_verify}.* -type f`.split.each do |output_info|
      puts output_info
      puts File.read(output_info)
    end
    exit 1
  end
end

def run
  path = "#{CLI_ROOT}/cf/i18n/resources/en/*".gsub("/", File::SEPARATOR)
  english_json_files = `find #{path} -type f`.split
  supported_locales = Dir.glob("#{CLI_ROOT}/cf/i18n/resources/**/*.all.json".gsub("/", File::SEPARATOR)).map do |filepath|
    filepath.split(File::SEPARATOR).last.gsub(".all.json", "")
  end.uniq

  english_json_files.each do |english_reference_file|
    supported_locales.each do |locale|
      verify_strings(english_reference_file, locale)
    end
  end
end

@verbose = ARGV.include?("-v")
install_i18n
run
