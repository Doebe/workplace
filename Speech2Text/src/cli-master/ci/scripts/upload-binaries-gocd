#!/usr/bin/env bash

set -ex

if [ -z "$AWS_ACCESS_KEY_ID" ]; then
  echo "Need to set AWS_ACCESS_KEY_ID"
  exit 1
fi

if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
  echo "Need to set AWS_SECRET_ACCESS_KEY"
  exit 1
fi

s3_config_file=$(pwd)/../../../../cli-ci/ci/s3cfg
filename_regex="cf-cli(-installer)?([-_0-9a-z]+)?(\.[a-z]+)?"

ls release

# Upload HEAD to master if HEAD is later than the latest release
latest_release_tag=$(git tag | egrep 'v[0-9]' | sort | tail -n 1; exit 0)
set +e
git merge-base --is-ancestor $latest_release_tag HEAD
if [ $? -eq 0 ]; then
  set -e
  echo "Uploading edge releases"

  for f in $(ls release/cf-cli*);do
    [[ $f =~ $filename_regex ]]
    installer="${BASH_REMATCH[1]}"
    os_arch="${BASH_REMATCH[2]}"
    extension="${BASH_REMATCH[3]}"
    if [ -z "${installer}" ]; then # don't upload edge installers
      s3cmd --config=$s3_config_file put $f s3://go-cli/master/cf-cli_edge${os_arch}${extension}
    fi
  done
fi

# Upload HEAD to releases
set +e
match=$(git show-ref --tags -d | grep $(git rev-parse HEAD))
if [ $? -eq 0 ]; then # head is tagged as a release
  set -e
  echo "Uploading stable" $release_tag "releases"

  release_tag=$( echo $match | cut -d'/' -f3 | egrep 'v[0-9]' | cut -d'v' -f2 )
  for f in $(ls release/cf-cli*);do
    [[ $f =~ $filename_regex ]]
    installer="${BASH_REMATCH[1]}"
    os_arch="${BASH_REMATCH[2]}"
    extension="${BASH_REMATCH[3]}"
    if [ -n "${installer}" ]; then
      s3cmd --config=$s3_config_file put $f s3://go-cli/releases/${release_tag}/cf-cli_installer_${release_tag}${os_arch}${extension}
    else
      s3cmd --config=$s3_config_file put $f s3://go-cli/releases/${release_tag}/cf-cli_${release_tag}${os_arch}${extension}
    fi
  done
fi
