// This file was generated by counterfeiter
package fakes

import (
	"github.com/cloudfoundry/cli/utils"
	"sync"
)

type FakeSha1Checksum struct {
	ComputeFileSha1Stub        func() ([]byte, error)
	computeFileSha1Mutex       sync.RWMutex
	computeFileSha1ArgsForCall []struct{}
	computeFileSha1Returns     struct {
		result1 []byte
		result2 error
	}
	CheckSha1Stub        func(string) bool
	checkSha1Mutex       sync.RWMutex
	checkSha1ArgsForCall []struct {
		arg1 string
	}
	checkSha1Returns struct {
		result1 bool
	}
	SetFilePathStub        func(string)
	setFilePathMutex       sync.RWMutex
	setFilePathArgsForCall []struct {
		arg1 string
	}
}

func (fake *FakeSha1Checksum) ComputeFileSha1() ([]byte, error) {
	fake.computeFileSha1Mutex.Lock()
	defer fake.computeFileSha1Mutex.Unlock()
	fake.computeFileSha1ArgsForCall = append(fake.computeFileSha1ArgsForCall, struct{}{})
	if fake.ComputeFileSha1Stub != nil {
		return fake.ComputeFileSha1Stub()
	} else {
		return fake.computeFileSha1Returns.result1, fake.computeFileSha1Returns.result2
	}
}

func (fake *FakeSha1Checksum) ComputeFileSha1CallCount() int {
	fake.computeFileSha1Mutex.RLock()
	defer fake.computeFileSha1Mutex.RUnlock()
	return len(fake.computeFileSha1ArgsForCall)
}

func (fake *FakeSha1Checksum) ComputeFileSha1Returns(result1 []byte, result2 error) {
	fake.ComputeFileSha1Stub = nil
	fake.computeFileSha1Returns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSha1Checksum) CheckSha1(arg1 string) bool {
	fake.checkSha1Mutex.Lock()
	defer fake.checkSha1Mutex.Unlock()
	fake.checkSha1ArgsForCall = append(fake.checkSha1ArgsForCall, struct {
		arg1 string
	}{arg1})
	if fake.CheckSha1Stub != nil {
		return fake.CheckSha1Stub(arg1)
	} else {
		return fake.checkSha1Returns.result1
	}
}

func (fake *FakeSha1Checksum) CheckSha1CallCount() int {
	fake.checkSha1Mutex.RLock()
	defer fake.checkSha1Mutex.RUnlock()
	return len(fake.checkSha1ArgsForCall)
}

func (fake *FakeSha1Checksum) CheckSha1ArgsForCall(i int) string {
	fake.checkSha1Mutex.RLock()
	defer fake.checkSha1Mutex.RUnlock()
	return fake.checkSha1ArgsForCall[i].arg1
}

func (fake *FakeSha1Checksum) CheckSha1Returns(result1 bool) {
	fake.CheckSha1Stub = nil
	fake.checkSha1Returns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSha1Checksum) SetFilePath(arg1 string) {
	fake.setFilePathMutex.Lock()
	defer fake.setFilePathMutex.Unlock()
	fake.setFilePathArgsForCall = append(fake.setFilePathArgsForCall, struct {
		arg1 string
	}{arg1})
	if fake.SetFilePathStub != nil {
		fake.SetFilePathStub(arg1)
	}
}

func (fake *FakeSha1Checksum) SetFilePathCallCount() int {
	fake.setFilePathMutex.RLock()
	defer fake.setFilePathMutex.RUnlock()
	return len(fake.setFilePathArgsForCall)
}

func (fake *FakeSha1Checksum) SetFilePathArgsForCall(i int) string {
	fake.setFilePathMutex.RLock()
	defer fake.setFilePathMutex.RUnlock()
	return fake.setFilePathArgsForCall[i].arg1
}

var _ utils.Sha1Checksum = new(FakeSha1Checksum)
